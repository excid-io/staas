@using Excid.Staas.Models
@model SignRequestForm

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Sign" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item"><a asp-controller="Sign" asp-action="List">Signatures</a></li>
        <li class="breadcrumb-item active">Create</li>
    </ol>
</nav>
<h2 class="fw-normal">New signature</h2>
<hr />
<div class="row">
    <div class="col-md-6">
        <div class="form-group mb-3">
            <label for="fileToHash" class="control-label mb-1">Select file to sign</label>
            <input type="file" id="fileToHash" onchange="javascript:hashFile();" class="form-control" />
            <span asp-validation-for="HashBase64" class="text-danger"></span>
        </div>
        <form enctype="multipart/form-data" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="HashBase64"/>
            <div class="form-group mb-3">
                <label asp-for="Comment" class="control-label mb-1"></label>
                <input asp-for="Comment" class="form-control" />
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <button type="submit" class="btn btn-primary mx-2">Save</button>
                <a class="btn btn-link" asp-action="Index" role="button">Cancel</a>
            </div>
        </form>
    </div>
    <div class="col-md-4 border border-primary-subtle rounded ms-4 ps-4 pt-4 bg-primary-subtle bg-gradient">
        <ul>
            <li>Select a file to be signed</li>
            <li>Optionally, add a comment to be displayed in the list of signatures</li>
        </ul>
    </div>
</div>

@section Scripts {
    <script>
        function ab2str(buf) {
            return String.fromCharCode.apply(null, new Uint8Array(buf));
        }

        function hashFile() {
            var input = document.getElementById("fileToHash");
            var hidden = document.getElementById("HashBase64");
            if (input.files.length === 0) {
                return;
            }
            var fileReader = new FileReader();
            fileReader.onload = async function () {
                result = new Uint8Array(fileReader.result);
                hash = await window.crypto.subtle.digest('SHA-256', result);
                const hashAsString = ab2str(hash);
                const hashAsBase64 = window.btoa(hashAsString);
                alert(hashAsBase64)
                hidden.value=hashAsBase64
            };
            fileReader.readAsArrayBuffer(input.files[0]);
        }
    </script>
}